package ${dao.package};

import java.util.ArrayList;

import java.io.ByteArrayInputStream;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Blob;
import java.sql.Timestamp;
import java.sql.Date;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import ${tablebean.package}.*;

/**
 * Class for ${tablebean.declaredName}DAO of Table ${tablebean.name}.
 * 
 * @author Tracktopell::jpa-builder @see  https://github.com/tracktopell/UtilProjects/tree/master/jpa-builder
 */

public class ${tablebean.declaredName}DAO extends     ConnectedDAO
                                          implements  TemplateDAO<${tablebean.declaredName}DTO>{

	private final static Logger logger = Logger.getLogger(${tablebean.declaredName}DAO.class.getName());

	/**
	*	Datasource for table ${tablebean.name} simple CRUD operations.
	*   x common paramenter.
	*/

	private static ${tablebean.declaredName}DAO instance;

	private ${tablebean.declaredName}DAO(){	
		logger.fine("created ${tablebean.declaredName}DAO.");
	}

	public static ${tablebean.declaredName}DAO getInstance() {
		if(instance == null){
			instance = new ${tablebean.declaredName}DAO();
		}
		return instance;
	}

	@Override
	public List<${tablebean.declaredName}DTO> find(HashMap<String, Object> whereMap) throws DAOException{    
		Connection      conn = null;
		PreparedStatement ps = null;
		ResultSet         rs = null;
		List<${tablebean.declaredName}DTO> dtoList = null;
		try {
			conn = getConnection();			
			StringBuilder strQry = new StringBuilder("select * from ${tablebean.name}");
			
			if(whereMap!=null && whereMap.size()>0){
				strQry.append(" where ( ");
				final Set<String> keySet = whereMap.keySet();
				int nk=1;
				for(String k: keySet){
					if(nk > 1){
						strQry.append(" and ");
					}
					strQry.append(k).append(" = ").append("?");
					nk++;
				}
				strQry.append(" )");
			}			
			ps = conn.prepareStatement(strQry.toString());
			if(whereMap!=null && whereMap.size()>0){
				final Set<String> keySet = whereMap.keySet();
				int nk=1;
				for(String k: keySet){
					Object v = whereMap.get(k);
					ps.setObject(nk, v);
					nk++;
				}
				strQry.append(" )");
			}
			rs = ps.executeQuery();
			dtoList = new ArrayList<${tablebean.declaredName}DTO>();
			while(rs.next()) {
				${tablebean.declaredName}DTO dto = new ${tablebean.declaredName}DTO();
				%foreach tablebean.member in ${tablebean.members}
				dto.${tablebean.member.callSetter} (${tablebean.member.setterNative} rs.${tablebean.member.valueGetter}("${tablebean.member.name}") )); 
				%endfor
				dtoList.add(dto);
			}
			return dtoList;
		}catch(SQLException ex) {
			logger.log(Level.SEVERE, "SQLException:", ex);
			throw new DAOException("InQuery:" + ex.getMessage());
		} finally {
			if(rs != null) {
				try{
					if(ps != null){
						ps.close();
					}
					if(rs != null){
						rs.close();
					}
					if(conn != null){
						conn.close();
					}
				}catch(SQLException ex) {
					logger.log(Level.SEVERE, "clossing, SQLException:" + ex.getMessage());
					throw new DAOException("Closing:"+ex.getMessage());
				}
			}
		}		
	};

	@Override
	public ${tablebean.declaredName}DTO insert(${tablebean.declaredName}DTO o) throws DAOException {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public int update(${tablebean.declaredName}DTO o, HashMap<String, Object> whereMap) throws DAOException {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

	@Override
	public int remove(HashMap<String, Object> whereMap) throws DAOException {
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}

    /*
    public int insert(${tablebean.declaredName} x) throws DAOException {
		PreparedStatement ps = null;
		int r = -1;
		Connection conn = null;
		try {
			conn = getConnection();
			ps = conn.prepareStatement("INSERT INTO ${tablebean.name}(${tablebean.listColumns4Insert}) "+
					" VALUES(${tablebean.listParamColumns4Insert})"
					,Statement.RETURN_GENERATED_KEYS);			
			int ci=1;
			%foreach tablebean.member in ${tablebean.members}			
			ps.setObject(ci++,x.${tablebean.member.getter}());
			%endfor

			r = ps.executeUpdate();					
			ResultSet rsk = ps.getGeneratedKeys();
			if(rsk != null){
				while(rsk.next()){
					x.${tablebean.setPK}((${tablebean.pk.javaObjectClass})rsk.getObject(1));
				}
			}
		}catch(SQLException ex) {
			logger.log(Level.SEVERE, "SQLException:", ex);
			throw new DAOException("InUpdate:" + ex.getMessage());
		} finally {
			if(ps != null) {
				try{				
					ps.close();
					conn.close();
				}catch(SQLException ex) {
					logger.log(Level.SEVERE, "clossing, SQLException:" + ex.getMessage());
					throw new DAOException("Closing:"+ex.getMessage());
				}
			}
		}
		return r;
	}

	public int update(${tablebean.declaredName} x, HashMap<String,Object> whereKeys) throws DAOException {
		PreparedStatement ps = null;
		int r= -1;
		Connection conn = null;
		try {
			conn = getConnection();

			StringBuilder sbQuer = new StringBuilder("UPDATE ${tablebean.name} SET ${tablebean.listColumns4Update} ");;
			if( whereKeys!=null && whereKeys.size() > 0 ){
				
			}

			ps = conn.prepareStatement();
			
			
			int ci=1;
			%foreach tablebean.member in ${tablebean.members}			
			ps.setObject(ci++,x.${tablebean.member.getter}());
			%endfor
			ps.setObject(ci++,x.${tablebean.getPK}());
			
			r = ps.executeUpdate();						
		}catch(SQLException ex) {
			logger.log(Level.SEVERE, "SQLException:", ex);
			throw new DAOException("InUpdate:" + ex.getMessage());
		} finally {
			if(ps != null) {
				try{
					ps.close();
					conn.close();
				}catch(SQLException ex) {
					logger.log(Level.SEVERE, "clossing, SQLException:" + ex.getMessage());
					throw new DAOException("Closing:"+ex.getMessage());
				}
			}
		}
		return r;
	}

    public int delete(${tablebean.declaredName} x)throws DAOException {
		PreparedStatement ps = null;
		int r= -1;
		Connection conn = null;
		try {
			conn = getConnection();
			ps = conn.prepareStatement("DELETE FROM ${tablebean.name} WHERE ${tablebean.pk.name}=?");
			ps.setObject(1, x.${tablebean.getPK}());
			
			r = ps.executeUpdate();						
		}catch(SQLException ex) {
			logger.log(Level.SEVERE, "SQLException:", ex);
			throw new DAOException("InUpdate:" + ex.getMessage());
		} finally {
			if(ps != null) {
				try{
					ps.close();
					conn.close();
				}catch(SQLException ex) {
					logger.log(Level.SEVERE, "clossing, SQLException:" + ex.getMessage());
					throw new DAOException("Closing:"+ex.getMessage());
				}
			}
		}
		return r;
	}
	*/
	
}