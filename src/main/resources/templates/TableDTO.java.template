package ${tablebean.package};

import java.io.ByteArrayInputStream;
import java.io.Serializable;
import java.io.InputStream;
import java.io.InputStream;
import java.util.Objects;
import java.util.Set;
import java.util.MissingFormatArgumentException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.sql.Date;
//import org.json.JSONArray;
//import org.json.JSONException;
//import org.json.JSONObject;
// Standar for API module of JSR 374, included in JEE7
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonException;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonReader;

/**
 * Class for mapping DTO of Table ${tablebean.name} with JSon marshalling methods.
 * PKs : ${tablebean.countPKs}
 * @author Tracktopell::jpa-builder @see  https://github.com/tracktopell/UtilProjects/tree/master/jpa-builder
 */

public class ${tablebean.declaredName}DTO extends Record_DTO{
    private static final long serialVersionUID = ${tablebean.serialId};
    %foreach tablebean.member in ${tablebean.members}
    ${tablebean.member.javadocCommnet}    
    ${tablebean.member.declaration}
    %endfor

    /** 
     * Default Constructor
     */
    public ${tablebean.declaredName}DTO() {
    }
    
    /**
     * Getters and Setters
     */
    %foreach tablebean.member in ${tablebean.members}
    ${tablebean.member.getter}

    ${tablebean.member.setter}    

    %endfor

	/**
    * @Returns JSon String
    */
    public String toJsonString() {
		JsonObjectBuilder jsonObj = Json.createObjectBuilder();
		// ..still in development
		%foreach tablebean.member in ${tablebean.members}
		jsonObj.add("${tablebean.member.javaIdentifier}", this.${tablebean.member.callGetter}()${tablebean.member.getterNative}); 
		%endfor
		return jsonObj.toString();
    }

	public static ${tablebean.declaredName}DTO create(String json) throws IllegalArgumentException{
		${tablebean.declaredName}DTO x = null;
		InputStream jsonStream = new ByteArrayInputStream(json.getBytes());
		JsonReader jsonReader =  Json.createReader(jsonStream);
		JsonObject jObj = jsonReader.readObject();
		// ..still in development
		%foreach tablebean.member in ${tablebean.members}
		if( jObj.containsKey("${tablebean.member.javaIdentifier}")&&!jObj.isNull("${tablebean.member.javaIdentifier}")){ x.${tablebean.member.javaIdentifier} = ${tablebean.member.setterNative} jObj.${tablebean.member.jsonObjValueGetter}("${tablebean.member.javaIdentifier}")${tablebean.member.jsonObjGetValue} );}
		%endfor
		return x;
	}
	
	@Override
	public Object getColumnValue(String name) throws IllegalArgumentException{
		try {
			Field f = getClass().getDeclaredField(name);		
			return f.get(this);
		}catch(NoSuchFieldException nsfe) {
			throw new IllegalArgumentException("NoSuchFieldException column:"+name);
		}catch(SecurityException se) {
			throw new IllegalArgumentException("SecurityException column:"+name);
		}catch(IllegalAccessException iae) {
			throw new IllegalArgumentException("IllegalAccessException column:"+name);
		}
	}
	
	@Override
	public void setColumnValue(String name, Object value) throws IllegalArgumentException{
		try {
			Field f = getClass().getDeclaredField(name);		
			f.set(this, value);
		}catch(NoSuchFieldException nsfe) {
			throw new IllegalArgumentException("NoSuchFieldException column:"+name);
		}catch(SecurityException se) {
			throw new IllegalArgumentException("SecurityException column:"+name);
		}catch(IllegalAccessException iae) {
			throw new IllegalArgumentException("IllegalAccessException column:"+name);
		}		
	}

    @Override
    public int hashCode() {
        int hash = 0;
        %foreach tablebean.member in ${tablebean.members}		
		${tablebean.member.agregateInHashcodeExcludeExp} hash += String.valueOf(${tablebean.member.javaIdentifier}).hashCode();
		%endfor
        return hash;
    }

	@Override
    public boolean equals(Object o){
		if (this == o) {
			return true;
		}
		if (o == null) {
			return false;
		}
		if (getClass() != o.getClass()) {
			return false;
		}        
        if (!(o instanceof ${tablebean.declaredName}DTO)) {
            return false;
        }		
		${tablebean.declaredName}DTO other = (${tablebean.declaredName}DTO ) o;
		%foreach tablebean.member in ${tablebean.members}	
		${tablebean.member.agregateInEqualsExcludeExp} if (!Objects.equals(this.${tablebean.member.javaIdentifier}, other.${tablebean.member.javaIdentifier})) { return false; }		
		%endfor
    	return true;
    }

    @Override
    public String toString() {
		StringBuilder sb=new StringBuilder();
		sb.append("${tablebean.declaredName}DTO {");
		%foreach tablebean.member in ${tablebean.members}		
		sb.append("${tablebean.member.javaIdentifier}" ).append("=").append(${tablebean.member.javaIdentifier}).append("|");
		%endfor
		sb.append("serialVersionUID=").append(serialVersionUID).append("}");
		return sb.toString();
    }

}
