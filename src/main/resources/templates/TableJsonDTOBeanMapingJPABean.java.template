package ${tablebean.package};

import java.util.Objects;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.Field;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import ${tablebean.dto.package}.RecordDTO;
import com.fasterxml.jackson.annotation.JsonIgnore;
/**
 * Class for mapping Json DTO Entity of Table ${tablebean.name}.
 * 
 * Json Serialization / Deserialization JSE/Android ready compatible.
 * @See https://developer.android.com/reference/org/json/JSONObject.html
 * @See https://stleary.github.io/JSON-java/
 *
 * @author Tracktopell::jpa-builder @see  https://github.com/tracktopell/jpa-builder
 */

public class ${tablebean.declaredName}DTO extends RecordDTO  {
    
    %foreach tablebean.member in ${tablebean.members}
    ${tablebean.member.javadocCommnet}
	${tablebean.member.jsonignore}
    ${tablebean.member.declaration}
    %endfor

	static {
		List<String> columnNamesList=new ArrayList<>();
		%foreach tablebean.member in ${tablebean.members}		
		columnNamesList.add("${tablebean.member.javaIdentifier}");
		%endfor
		columnNames = new String[columnNamesList.size()];
		columnNames = columnNamesList.toArray(columnNames);
		
		List<String> columnClassesList=new ArrayList<>();
		
		%foreach tablebean.member in ${tablebean.members}
		columnClassesList.add("${tablebean.member.class}");		
		%endfor
		columnClasses = new String[columnClassesList.size()];
		columnClasses = columnClassesList.toArray(columnClasses);
	}
    /** 
     * Default Constructor
     */
    public ${tablebean.declaredName}DTO() {
    }

    /**
     * Getters and Setters
     */
    %foreach tablebean.member in ${tablebean.members}
    ${tablebean.member.getter}
    ${tablebean.member.setter}
    %endfor

    @Override
    public int hashCode() {
        int hash = 0;
        %foreach tablebean.member in ${tablebean.members}		
		hash += String.valueOf(${tablebean.member.javaIdentifier}).hashCode();
		%endfor
        return hash;
    }

	@Override
    public boolean equals(Object o){
		if (this == o) {
			return true;
		}
		if (o == null) {
			return false;
		}
		if (getClass() != o.getClass()) {
			return false;
		}        
        if (!(o instanceof ${tablebean.declaredName}DTO)) {
            return false;
        }		
		${tablebean.declaredName}DTO  other = (${tablebean.declaredName}DTO ) o;
		%foreach tablebean.member in ${tablebean.members}	
		if (!Objects.equals(this.${tablebean.member.javaIdentifier}, other.${tablebean.member.javaIdentifier})) { return false; }		
		%endfor
    	return true;
    }

	/**
    * @Returns String represention.
    */
	@Override
    public String toString() {
		StringBuilder sb=new StringBuilder("${tablebean.declaredName}DTO{");
		try{
			int memberAdded=0;
			%foreach tablebean.member in ${tablebean.members}
			if(memberAdded > 0){  sb.append(", ");  }
			//sb.append("${tablebean.member.javaIdentifier}").append("=").append(${tablebean.member.jsonValueGetter});		
            sb.append("${tablebean.member.javaIdentifier}").append("=").append(${tablebean.member.javaIdentifier});
			memberAdded++;
			%endfor
		} catch(Exception ex){
			ex.printStackTrace(System.err);
		}
		sb.append("}");

		return sb.toString();
    }

	/**
    * @Returns JSon String
    */
    public String toJSonString() {
		JSONObject jsonObj = new JSONObject();
		try{
			%foreach tablebean.member in ${tablebean.members}
			${tablebean.member.jsonignore.comment}jsonObj.put("${tablebean.member.javaIdentifier}", ${tablebean.member.jsonValueGetter});		
			%endfor
		} catch(Exception ex){
			throw new IllegalStateException(ex.getMessage());
		}

		return jsonObj.toString();
    }

	public static ${tablebean.declaredName}DTO create(String json) throws IllegalArgumentException{
		${tablebean.declaredName}DTO x = null;
		JSONObject jObj = null;
		try{
			jObj = new JSONObject(json);
			%foreach tablebean.member in ${tablebean.members}
			x.${tablebean.member.javaIdentifier} = jObj.has("${tablebean.member.javaIdentifier}")&&!jObj.isNull("${tablebean.member.javaIdentifier}")?${tablebean.member.valueCast}(jObj.${tablebean.member.valueGetter}("${tablebean.member.javaIdentifier}")):null;
			%endfor
		} catch(Exception exParse){
			throw new IllegalArgumentException(exParse.getMessage());
		}
		return x;
	}
	
	@Override
	public Object getColumnValue(String name) throws IllegalArgumentException{
		try {
			Field f = getClass().getDeclaredField(name);		
			return f.get(this);
		}catch(NoSuchFieldException nsfe) {
			throw new IllegalArgumentException("NoSuchFieldException column:"+name);
		}catch(SecurityException se) {
			throw new IllegalArgumentException("SecurityException column:"+name);
		}catch(IllegalAccessException iae) {
			throw new IllegalArgumentException("IllegalAccessException column:"+name);
		}
	}
	
	@Override
	public void setColumnValue(String name, Object value) throws IllegalArgumentException{
		try {
			Field f = getClass().getDeclaredField(name);		
			f.set(this, value);
		}catch(NoSuchFieldException nsfe) {
			throw new IllegalArgumentException("NoSuchFieldException column:"+name);
		}catch(SecurityException se) {
			throw new IllegalArgumentException("SecurityException column:"+name);
		}catch(IllegalAccessException iae) {
			throw new IllegalArgumentException("IllegalAccessException column:"+name);
		}		
	}
	
}
